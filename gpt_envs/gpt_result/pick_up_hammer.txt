```python
class block_hammer_beat(Base_task):

    def setup_demo(self, **kwags):
        # load scene and robot
        super().__init__(**kwags)
        self.create_table_and_wall()
        self.load_robot()
        self.setup_planner()
        self.load_camera(kwags.get('camera_w', 640), kwags.get('camera_h', 480))
        self.pre_move()
        self.load_actors()

    def load_actors(self):
        # load self.hammer, self.hammer_data and self.block
        self.hammer = self.load_hammer()
        self.hammer_data = self.get_hammer_data()
        self.block = self.load_block()

    def play_once(self):
        # The function that needs to be generated.
        
        # Get the poses of the hammer and the block
        hammer_pose = self.hammer.get_pose().p  # [x, y, z]
        block_pose = self.block.get_pose().p    # [x, y, z]

        # Determine which arm to use based on the block's x coordinate
        if block_pose[0] > 0:
            # Use right arm to grasp the hammer
            self.open_right_gripper()
            pre_grasp_pose = self.get_grasp_pose_w_labeled_direction(self.hammer, self.hammer_data, pre_dis=0.1)
            target_grasp_pose = self.get_grasp_pose_w_labeled_direction(self.hammer, self.hammer_data)
            self.right_move_to_pose_with_screw(pre_grasp_pose)
            self.right_move_to_pose_with_screw(target_grasp_pose)
            self.close_right_gripper()
            self.right_move_to_pose_with_screw(pre_grasp_pose)
        else:
            # Use left arm to grasp the hammer
            self.open_left_gripper()
            pre_grasp_pose = self.get_grasp_pose_w_labeled_direction(self.hammer, self.hammer_data, pre_dis=0.1)
            target_grasp_pose = self.get_grasp_pose_w_labeled_direction(self.hammer, self.hammer_data)
            self.left_move_to_pose_with_screw(pre_grasp_pose)
            self.left_move_to_pose_with_screw(target_grasp_pose)
            self.close_left_gripper()
            self.left_move_to_pose_with_screw(pre_grasp_pose)

        # Move the hammer to beat the block
        if block_pose[0] > 0:
            # Use right arm to beat the block
            pre_beat_pose = self.get_target_pose_from_goal_point_and_direction(self.hammer, self.hammer_data, self.right_endpose, block_pose, [0, 0, 0, 1], pre_dis=0.1)
            target_beat_pose = self.get_target_pose_from_goal_point_and_direction(self.hammer, self.hammer_data, self.right_endpose, block_pose, [0, 0, 0, 1], pre_dis=0)
            self.right_move_to_pose_with_screw(pre_beat_pose)
            self.right_move_to_pose_with_screw(target_beat_pose)
        else:
            # Use left arm to beat the block
            pre_beat_pose = self.get_target_pose_from_goal_point_and_direction(self.hammer, self.hammer_data, self.left_endpose, block_pose, [0, 0, 0, 1], pre_dis=0.1)
            target_beat_pose = self.get_target_pose_from_goal_point_and_direction(self.hammer, self.hammer_data, self.left_endpose, block_pose, [0, 0, 0, 1], pre_dis=0)
            self.left_move_to_pose_with_screw(pre_beat_pose)
            self.left_move_to_pose_with_screw(target_beat_pose)

        # Lift the hammer after beating the block
        if block_pose[0] > 0:
            self.right_move_to_pose_with_screw(pre_beat_pose)
        else:
            self.left_move_to_pose_with_screw(pre_beat_pose)

    def check_success(self):
        # check the task success
        # Implement the logic to check if the block has been successfully beaten
        pass
```

### Explanation:
1. **Grasping the Hammer**:
   - The code first determines which arm to use based on the block's x-coordinate.
   - It then calculates the pre-grasp and target grasp poses for the hammer.
   - The appropriate arm moves to the pre-grasp pose, then to the target grasp pose, and finally closes the gripper to grasp the hammer.

2. **Beating the Block**:
   - After grasping the hammer, the code calculates the pre-beat and target beat poses for the block.
   - The appropriate arm moves the hammer to the pre-beat pose, then to the target beat pose to strike the block.
   - Finally, the arm lifts the hammer back to the pre-beat pose after striking the block.

3. **Check Success**:
   - The `check_success` method is left as a placeholder where you can implement the logic to determine if the block has been successfully beaten.